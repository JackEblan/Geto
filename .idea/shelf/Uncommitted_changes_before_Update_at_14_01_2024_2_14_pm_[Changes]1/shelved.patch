Index: build-logic/convention/src/main/kotlin/AndroidApplicationConventionPlugin.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.android.build.api.dsl.ApplicationExtension\r\nimport com.android.geto.configureKotlinAndroid\r\nimport com.android.geto.libs\r\nimport org.gradle.api.Plugin\r\nimport org.gradle.api.Project\r\nimport org.gradle.kotlin.dsl.configure\r\n\r\nclass AndroidApplicationConventionPlugin : Plugin<Project> {\r\n    override fun apply(target: Project) {\r\n        with(target) {\r\n            with(pluginManager) {\r\n                apply(libs.plugins.com.android.application.get().pluginId)\r\n                apply(libs.plugins.org.jetbrains.kotlin.android.get().pluginId)\r\n            }\r\n\r\n            extensions.configure<ApplicationExtension> {\r\n                configureKotlinAndroid(this)\r\n                defaultConfig.targetSdk = 34\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build-logic/convention/src/main/kotlin/AndroidApplicationConventionPlugin.kt b/build-logic/convention/src/main/kotlin/AndroidApplicationConventionPlugin.kt
--- a/build-logic/convention/src/main/kotlin/AndroidApplicationConventionPlugin.kt	
+++ b/build-logic/convention/src/main/kotlin/AndroidApplicationConventionPlugin.kt	
@@ -1,9 +1,11 @@
 import com.android.build.api.dsl.ApplicationExtension
+import com.android.geto.GetoFlavor
 import com.android.geto.configureKotlinAndroid
 import com.android.geto.libs
 import org.gradle.api.Plugin
 import org.gradle.api.Project
 import org.gradle.kotlin.dsl.configure
+import org.gradle.kotlin.dsl.support.uppercaseFirstChar
 
 class AndroidApplicationConventionPlugin : Plugin<Project> {
     override fun apply(target: Project) {
@@ -17,6 +19,12 @@
                 configureKotlinAndroid(this)
                 defaultConfig.targetSdk = 34
             }
+
+            gradle.startParameter.taskNames.forEach { task ->
+                if(task.contains(GetoFlavor.fdroid.name.uppercaseFirstChar())) {
+                    println("Bro")
+                }
+            }
         }
     }
 }
\ No newline at end of file
Index: build-logic/gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>org.gradle.parallel=true\r\norg.gradle.caching=true\r\norg.gradle.configureondemand=true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/build-logic/gradle.properties b/build-logic/gradle.properties
--- a/build-logic/gradle.properties	
+++ b/build-logic/gradle.properties	
@@ -1,3 +1,3 @@
-org.gradle.parallel=true
+org.gradle.parallel=false
 org.gradle.caching=true
 org.gradle.configureondemand=true
\ No newline at end of file
Index: build-logic/convention/src/main/kotlin/com/android/geto/GetoFlavor.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build-logic/convention/src/main/kotlin/com/android/geto/GetoFlavor.kt b/build-logic/convention/src/main/kotlin/com/android/geto/GetoFlavor.kt
new file mode 100644
--- /dev/null	
+++ b/build-logic/convention/src/main/kotlin/com/android/geto/GetoFlavor.kt	
@@ -0,0 +1,41 @@
+package com.android.geto
+
+import com.android.build.api.dsl.ApplicationExtension
+import com.android.build.api.dsl.ApplicationProductFlavor
+import com.android.build.api.dsl.CommonExtension
+import com.android.build.api.dsl.ProductFlavor
+
+@Suppress("EnumEntryName")
+enum class GetoDimension {
+    contentType
+}
+
+// The content for the app can either come from local static data which is useful for demo
+// purposes, or from a production backend server which supplies up-to-date, real content.
+// These two product flavors reflect this behaviour.
+@Suppress("EnumEntryName")
+enum class GetoFlavor(val dimension: GetoDimension, val applicationIdSuffix: String? = null) {
+    fdroid(GetoDimension.contentType), github(GetoDimension.contentType)
+}
+
+fun configureFlavors(
+    commonExtension: CommonExtension<*, *, *, *, *>,
+    flavorConfigurationBlock: ProductFlavor.(flavor: GetoFlavor) -> Unit = {}
+) {
+    commonExtension.apply {
+        flavorDimensions += GetoDimension.contentType.name
+        productFlavors {
+            GetoFlavor.values().forEach {
+                create(it.name) {
+                    dimension = it.dimension.name
+                    flavorConfigurationBlock(this, it)
+                    if (this@apply is ApplicationExtension && this is ApplicationProductFlavor) {
+                        if (it.applicationIdSuffix != null) {
+                            applicationIdSuffix = it.applicationIdSuffix
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: build-logic/convention/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\r\n\r\nplugins {\r\n    `kotlin-dsl`\r\n}\r\n\r\ngroup = \"com.android.geto.buildlogic\"\r\n\r\njava {\r\n    sourceCompatibility = JavaVersion.VERSION_17\r\n    targetCompatibility = JavaVersion.VERSION_17\r\n}\r\n\r\ntasks.withType<KotlinCompile>().configureEach {\r\n    kotlinOptions {\r\n        jvmTarget = JavaVersion.VERSION_17.toString()\r\n    }\r\n}\r\n\r\ndependencies {\r\n    compileOnly(libs.firebase.crashlytics.gradlePlugin)\r\n    compileOnly(libs.android.gradlePlugin)\r\n    compileOnly(libs.kotlin.gradlePlugin)\r\n    compileOnly(libs.ksp.gradlePlugin)\r\n    implementation(files(libs.javaClass.superclass.protectionDomain.codeSource.location))\r\n}\r\n\r\ntasks {\r\n    validatePlugins {\r\n        enableStricterValidation = true\r\n        failOnWarning = true\r\n    }\r\n}\r\n\r\ngradlePlugin {\r\n    plugins {\r\n        register(\"androidApplication\") {\r\n            id = \"com.android.geto.application\"\r\n            implementationClass = \"AndroidApplicationConventionPlugin\"\r\n        }\r\n\r\n        register(\"androidApplicationCompose\") {\r\n            id = \"com.android.geto.applicationCompose\"\r\n            implementationClass = \"AndroidApplicationComposeConventionPlugin\"\r\n        }\r\n\r\n        register(\"androidLibrary\") {\r\n            id = \"com.android.geto.library\"\r\n            implementationClass = \"AndroidLibraryConventionPlugin\"\r\n        }\r\n\r\n        register(\"androidLibraryJacoco\") {\r\n            id = \"com.android.geto.libraryJacoco\"\r\n            implementationClass = \"AndroidLibraryJacocoConventionPlugin\"\r\n        }\r\n\r\n        register(\"androidLibraryCompose\") {\r\n            id = \"com.android.geto.libraryCompose\"\r\n            implementationClass = \"AndroidLibraryComposeConventionPlugin\"\r\n        }\r\n\r\n        register(\"androidFeature\") {\r\n            id = \"com.android.geto.feature\"\r\n            implementationClass = \"AndroidFeatureConventionPlugin\"\r\n        }\r\n\r\n        register(\"androidFirebase\") {\r\n            id = \"com.android.geto.applicationFirebase\"\r\n            implementationClass = \"AndroidApplicationFirebaseConventionPlugin\"\r\n        }\r\n\r\n        register(\"androidHilt\") {\r\n            id = \"com.android.geto.hilt\"\r\n            implementationClass = \"AndroidHiltConventionPlugin\"\r\n        }\r\n\r\n        register(\"androidRoom\") {\r\n            id = \"com.android.geto.room\"\r\n            implementationClass = \"AndroidRoomConventionPlugin\"\r\n        }\r\n\r\n        register(\"jvmLibrary\") {\r\n            id = \"com.android.geto.jvmLibrary\"\r\n            implementationClass = \"JvmLibraryConventionPlugin\"\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build-logic/convention/build.gradle.kts b/build-logic/convention/build.gradle.kts
--- a/build-logic/convention/build.gradle.kts	
+++ b/build-logic/convention/build.gradle.kts	
@@ -69,6 +69,11 @@
             implementationClass = "AndroidApplicationFirebaseConventionPlugin"
         }
 
+        register("androidFlavors") {
+            id = "com.android.geto.applicationFlavors"
+            implementationClass = "AndroidApplicationFlavorsConventionPlugin"
+        }
+
         register("androidHilt") {
             id = "com.android.geto.hilt"
             implementationClass = "AndroidHiltConventionPlugin"
Index: build-logic/convention/src/main/kotlin/AndroidApplicationFlavorsConventionPlugin.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build-logic/convention/src/main/kotlin/AndroidApplicationFlavorsConventionPlugin.kt b/build-logic/convention/src/main/kotlin/AndroidApplicationFlavorsConventionPlugin.kt
new file mode 100644
--- /dev/null	
+++ b/build-logic/convention/src/main/kotlin/AndroidApplicationFlavorsConventionPlugin.kt	
@@ -0,0 +1,15 @@
+import com.android.build.api.dsl.ApplicationExtension
+import com.android.geto.configureFlavors
+import org.gradle.api.Plugin
+import org.gradle.api.Project
+import org.gradle.kotlin.dsl.configure
+
+class AndroidApplicationFlavorsConventionPlugin : Plugin<Project> {
+    override fun apply(target: Project) {
+        with(target) {
+            extensions.configure<ApplicationExtension> {
+                configureFlavors(this)
+            }
+        }
+    }
+}
\ No newline at end of file
